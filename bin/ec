#!/bin/bash
# emacsclient wrapper for managing single Emacs instance in an X environment 
# with multiple X and terminal frames. Starts Emacs with server enabled 
# on-demand and has custom options for X frame management and other things.
#
# Author: Øyvind Stegard <oyvind.stegard@ifi.uio.no>
# Copyright (C) 2012-2014 Øyvind Stegard <oyvind.stegard@ifi.uio.no>
#
# This program is free software: you can redistribute it and/or modify it under 
# the terms of the GNU General Public License as published by the Free Software 
# Foundation, either version 3 of the License, or (at your option) any later 
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT 
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

# Version of emacsclient wrapper
readonly VERSION=0.6

# -- Start of customizable variables: --
# Set to emacs binary
EMACS=emacs
# Set to to emacsclient binary
EMACSCLIENT_REAL=emacsclient

# Emacs regular expression that should match frame names which are
# undesireable when using option '--select-frame-dwim'.
#
# Can be set in environment as 'EC_UNWANTED_FRAMES_DWIM_REGEXP'.
#
# Default value tries to avoid frames with titles common to Gnus frames.
# LISP string quoting level (backslash ratio 2:1).
UNWANTED_FRAMES_DWIM_REGEXP=${EC_UNWANTED_FRAMES_DWIM_REGEXP:-'^\\*\\(Article\\|Summary\\|Group\\|unsent\\|message\\)'}

# Set to an Emacs lisp expression name which can be evaluated to handle
# mailto:-URLs given as argument to --mailto option.
#
# Default value invokes `message-mail' with recipient as first argument.
# The following lisp variables will be bound when expression is evaluated:
# `mailto-url'       - a string with the mailto URL specified by client
# `mailto-new-frame' - will have value `t' if a new frame is requested, `nil' otherwise.
#
# Can be set in environment as 'EC_MAILTO_HANDLER_SEXP', which should be a valid
# LISP expression.
MAILTO_HANDLER_SEXP=${EC_MAILTO_HANDLER_SEXP:-'
 (progn
   (require (quote url-util))
   (let ((recipient (when (string-match "^\\(?:mailto:\\)?\\([^?]+\\)" mailto-url)
                     (url-unhex-string (replace-regexp-in-string "\\+" "%20" (match-string 1 mailto-url))))))
     (message-mail recipient)))'}

#MAILTO_HANDLER_SEXP='(mailto-url-gnus mailto-url t mailto-new-frame)'

# -- End of customizable variables. --

# Check binary availability and version
type $EMACSCLIENT_REAL 1>/dev/null 2>&1 || {
    echo >&2 "Error: real emacsclient executable not found: $EMACSCLIENT_REAL"
    exit 1
}

V=($($EMACS --version 2>/dev/null))
if [ $? -ne 0 ]; then
    echo >&2 "Error: failed to execute Emacs binary: $EMACS --version"
    exit 1
fi
V=${V[2]}
V=(${V//./ })
V_MAJOR=${V[0]} # Emacs major version number
V_MINOR=${V[1]} # Emacs minor version number
unset V
if [ -z "$V_MAJOR" ] || [ -z "$V_MINOR" ]; then
    echo >&2 "Error: failed to determine Emacs major/minor version from output of: $EMACS --version"
    exit 1
fi

emacsrunning_p() {
    pgrep -U $(id -u) -f "^$EMACS -f server-start|^$EMACS --daemon" 1>/dev/null 2>&1
}

# Start Emacs, or if starting/started, wait for Emacs server init before returning.
# If first arg is 'daemon', then "emacs --daemon" is always used to start instance
# regardless of X display availability.
# Returns 0 if a new instance was started.
# Returns 1 if an instance was already running.
# Returns 2 if init failed or connect to current instance failed.
emacsinit() {
    local started=
    if ! emacsrunning_p; then
        # LANG=ab_XY.utf8 is not compatible with Emacs23, set to compatible LANG=ab_XY.UTF-8 syntax.
        export LANG=${LANG/utf8/UTF-8}
        # Ibus IM and dead keys do not work reliably with Emacs <= 24.3 under X
        if [ $V_MAJOR -lt 24 ] || [ $V_MAJOR -eq 24 -a $V_MINOR -le 3 ]; then
            export XMODIFIERS=
        fi
        if [ "$DISPLAY" ] && [ "$1" != daemon ]; then
            $EMACS -f server-start 2>&1 < /dev/null &
            disown %+
            sleep 2
        else
            $EMACS --daemon
        fi
        started=1
    fi
    local maxattempts=10 attempt=0
    while [ $attempt -lt $maxattempts ] && ! $EMACSCLIENT_REAL -e t >/dev/null 2>&1; do
        attempt=$((attempt + 1))
        sleep 1
    done

    if [ $attempt -eq $maxattempts ]; then
        # Failed to connect to Emacs
        return 2
    fi

    [ "$started" ]
}
shutdownemacs() {
    emacsrunning_p || return 1
    $EMACSCLIENT_REAL -e '(progn (select-frame-set-input-focus (selected-frame))(save-buffers-kill-emacs))'
    sleep 1
}
shutdownemacs_tty() {
    emacsrunning_p || return 1
    $EMACSCLIENT_REAL --tty -e '(save-buffers-kill-emacs)'
    sleep 1
}
# Attempts to locate all Emacs frames on the *current* desktop and viewport of X.
# Echoes window ids of found frames as decimal numbers. Returns 1 if none found.
find_emacs_frames_on_current_viewport() {
    [ "$DISPLAY" ] || return 1
    type xprop xwininfo xrandr 1>/dev/null 2>&1 || { echo >&2 'Warn: missing one of commands: xrandr, xwininfo, xprop'; return 1; }
    
    local vp_wh d
    d=$(xprop -notype -root _NET_CURRENT_DESKTOP|cut -d' ' -f3) # current desktop
    vp_wh=($(xrandr -q|sed -n -e 's/.*current \([0-9]*\) x \([0-9]*\).*/\1 \2/p'))

    local id class_desktop xy found=
    for id in $(xprop -notype -root -f _NET_CLIENT_LIST 32c _NET_CLIENT_LIST|sed 's/[^0-9]/ /g'); do
        class_desktop=$(xprop -notype -id $id WM_CLASS _NET_WM_DESKTOP | awk '/^WM_CLASS/ { if(match($0,/"[^"]*"/))
                                                                                             { c1 = substr($0,RSTART+1,RLENGTH-2);
                                                                                               rest = substr($0,RSTART+RLENGTH+1);
                                                                                               if (match(rest,/"[^"]*"/))
                                                                                                { c2 = substr(rest,RSTART+1,RLENGTH-2) }}}
                                                                              /^_NET_WM_DESKTOP = / {d=$3}
                                                                              END {if (!c1){c1="none";c2="NONE"}; printf("%s.%s %d",c1,c2,d)}')
        [ "${class_desktop//Emacs}" != "$class_desktop" ] || continue
        [ ${class_desktop#* } -eq $d ] || continue
        
        xy=($(xwininfo -id $id | awk '/Absolute upper-left X:/ {x=$4} /Absolute upper-left Y:/ {y=$4} END {printf("%d %d",x,y)}'))
        # Check position of top left corner to determine if window is on current viewport
        if [ ${xy[0]} -gt 0 ] && [ ${xy[0]} -lt ${vp_wh[0]} ] && [ ${xy[1]} -gt 0 ] && [ ${xy[1]} -lt ${vp_wh[1]} ]; then
            echo $id
            found=1
        fi
    done
    [ "$found" ]
}

only_nowaitargs_p() {
    for arg in "$@"; do
        if [ "$arg" != -n ] && [ "$arg" != --no-wait ]; then
            return 1
        fi
    done
    return 0
}
tty_arg_p() {
    for arg in "$@"; do
        if [ "$arg" = -t ] || [ "$arg" = --tty ] || [ "$arg" = -nw ] || [ "$arg" = --no-window-system ]; then
            return 0
        fi
    done
    return 1
}
create_frame_arg_p() {
    for arg in "$@"; do
        if [ "$arg" = -c ] || [ "$arg" = --create-frame ]; then
            return 0
        fi
    done
    return 1
}

FILTERED_ARGS=()
handle_custom_args() {
    local tty= new_frame=
    if create_frame_arg_p "$@"; then
        new_frame=1
    fi
    if tty_arg_p "$@"; then
        tty=1
        new_frame=1
    fi
    while [ "$1" ]; do
	    case $1 in
  	        --isrunning)
                # Just a status is requsted.
                emacsrunning_p
                exit $?
    	        ;;

            --select-frame-dwim)
                # Focus/select frame on current viewport of desktop or create new.
                # De-prioritize frames matching unwated regexp in name.
                # Prioritize last focused frame if present on current viewport/desktop.
                # Last resort comparison is by frame dimension: biggest wins.
                xids=$(find_emacs_frames_on_current_viewport)
                if [ "$xids" ]; then
                    # select amongst frames/windows on current viewport
                    $0 -e "(let* ((ids '($xids))
                                        (sf (selected-frame))
                                        (unwanted \"${UNWANTED_FRAMES_DWIM_REGEXP}\")
                                        (flist
                                         (filtered-frame-list
                                          (lambda(f) (and (frame-parameter f 'outer-window-id)
                                                          (member (string-to-number (frame-parameter f 'outer-window-id)) ids))))))
                                   (when flist
                                          (select-frame-set-input-focus (car (sort flist
                                            (lambda(a b)
                                              (cond
                                               ((string-match unwanted (frame-parameter a 'name)) nil)
                                               ((string-match unwanted (frame-parameter b 'name)) t)
                                               ((eq a sf))
                                               ((not (or (eq a sf) (eq b sf)))
                                                 (> (* (frame-parameter a 'height) (frame-parameter a 'width))
                                                       (* (frame-parameter b 'height) (frame-parameter b 'width))))
                                              ) ; (cond
                                             ) ; (lambda
                                          ))) ; (select-frame...
                                        ) ; when flist
                                       )" >/dev/null
                else
                    # none found, fall back to popping a new frame
                    FILTERED_ARGS+=(-c)
                fi
                ;;
            
            --shutdown)
                # Graceful shutdown of running instance requested.
                if [ "$tty" ]; then
                    shutdownemacs_tty
                else
                    shutdownemacs
                fi
                exit $?
                ;;
            
            --shutdown-tty)
                # Graceful shutdown of running instance from tty requested.
                shutdownemacs_tty
                exit $?
                ;;
            
            --mailto)
                # Use Emacs as mail program.
                local opts= url=
                if [ "$new_frame" ]; then
                    opts='-c'
                fi
                if [ "$tty" ]; then
                    opts='-t'
                fi
                if [ "${2:0:1}" != '-' ]; then
                    url=$2
                    shift
                fi
                cd $HOME
                exec $0 $opts -e "(let ((mailto-url \"${url}\") (mailto-new-frame (> (length \"${new_frame}\") 0))) ${MAILTO_HANDLER_SEXP})"
                ;;

            --stdin|-)
                # Read stdin and open it as temporary file
                name=stdin
                if [ "$2" ] && [ "${2:0:1}" != - ]; then
                    name=$2
                    shift
                fi
                tmpfile=$(mktemp -t "$(basename "$name").XXXXXXX")
                cat > "$tmpfile"
                FILTERED_ARGS+=("$tmpfile")
                ;;
            
            -[hH]|--help)
                $EMACSCLIENT_REAL --help
                echo
                echo "Custom $0 args (version $VERSION):"
                echo "--isrunning                  Exits with code 0 if an Emacs instance is found running."
                echo "--select-frame-dwim          Focuses a suitable frame on current X desktop/viewport"
                echo "                             or creates a new one if none found."
                echo "--shutdown                   Focuses last active frame and requests shutdown."
                echo "--shutdown-tty               Opens a frame in tty and requests shutdown."
                echo "--mailto MAILTO-URL          Compose an email. Combine with -c to compose in new frame."
                echo "--stdin [NAME], - [NAME]     Read from stdin to a temporary file and visit file."
                echo "                             Optionally NAME the temporary file."
                echo
                echo "Set top of $0 script for possible customizations."
                exit 0
                ;;
            *)
                FILTERED_ARGS+=("$1")
                ;;
        esac
        shift
    done
}

# Process any custom arguments/actions first
handle_custom_args "$@"

# handle_custom_args may exit, so we may never get here.
# however, if we do, then pass FILTERED_ARGS on to real emacsclient

args=("${FILTERED_ARGS[@]}")

# If terminal frame is requested, then start emacs in daemon mode.
if tty_arg_p "${args[@]}"; then
    emacsinit daemon
else
    emacsinit x
fi
exitcode=$?
if [ $exitcode -eq 0 ]; then
    # A new Emacs instance was started.
    # If -c or --create-frame is amongst the emacsclient args, remove them,
    # since a new frame will come up when new Emacs instance starts.
    newargs=()
    for arg in "${args[@]}"; do
        if [ "$arg" != -c ] && [ "$arg" != --create-frame ]; then
            newargs[${#newargs[@]}]="$arg"
        fi
    done
    args=("${newargs[@]}")
elif [ $exitcode -eq 2 ]; then
    echo >&2 "Error: failed to start Emacs."
    exit $exitcode
fi

# If no args, connect immediately to started instance if terminal only,
# else exit.
if [ ${#args[@]} -eq 0 ] || only_nowaitargs_p "${args[@]}"; then
    # If no X, then connect to started Emacs daemon immediately in the terminal.
    if [ -z "$DISPLAY" ]; then
        exec $EMACSCLIENT_REAL -t 2>/dev/null
    else
        exit 0
    fi
fi

if create_frame_arg_p "${args[@]}" && [ "$DISPLAY" ]; then
    $EMACSCLIENT_REAL "${args[@]}" &
    sleep 0.1
    # Make sure created frame gets proper WM focus
    $EMACSCLIENT_REAL -e '(select-frame-set-input-focus (selected-frame))' > /dev/null
    wait $!
else
    exec $EMACSCLIENT_REAL "${args[@]}"
fi
